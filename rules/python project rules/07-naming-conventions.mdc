---
description: 
globs: *.py,**/*.py
alwaysApply: false
---
---
globs: [*.py, **/*.py]
alwaysApply: false
---
 # Naming Conventions Rule

## Overview
This rule defines the standard naming conventions for Python game projects, ensuring consistency and readability across the codebase.

## File Naming
1. **Python Files**
   - Lowercase with underscores
   - Descriptive and concise
   - End with .py extension
   - Avoid special characters

2. **Test Files**
   - Prefix with "test_"
   - Match source file name
   - Clear test purpose
   - End with .py extension

3. **Documentation Files**
   - Use appropriate extensions (.md, .rst)
   - Clear content indication
   - Version number if applicable
   - Language indication if multilingual

## Module Names
1. **Source Modules**
   - Lowercase with underscores
   - Single responsibility focus
   - Clear functionality indication
   - Avoid generic names

2. **Package Names**
   - Short and descriptive
   - Lowercase only
   - No underscores
   - Avoid conflicts

## Class Names
1. **General Classes**
   - CapWords convention
   - Descriptive names
   - Avoid abbreviations
   - Single responsibility

2. **Exception Classes**
   - End with "Error"
   - Clear error indication
   - Hierarchy reflection
   - Specific to use case

## Function Names
1. **Public Functions**
   - Lowercase with underscores
   - Verb-based names
   - Clear purpose
   - Descriptive parameters

2. **Private Functions**
   - Single leading underscore
   - Internal use indication
   - Implementation details
   - Clear scope

## Variable Names
1. **Constants**
   - All uppercase
   - Underscore separated
   - Clear purpose
   - Include units if applicable

2. **Instance Variables**
   - Lowercase with underscores
   - Descriptive names
   - Avoid single letters
   - Clear data type indication

3. **Private Variables**
   - Single leading underscore
   - Internal use only
   - Clear scope
   - Implementation specific

## Parameter Names
1. **Function Parameters**
   - Descriptive names
   - Clear purpose
   - Type indication
   - Default value clarity

2. **Class Parameters**
   - Match instance variables
   - Clear relationship
   - Consistent style
   - Self-documenting

## Special Names
1. **Magic Methods**
   - Double underscores
   - Standard Python names
   - Clear purpose
   - Proper implementation

2. **Property Names**
   - Noun-based
   - Clear attribute relation
   - Getter/setter pairs
   - Consistent style

## Best Practices
1. **Consistency**
   - Follow project conventions
   - Maintain style throughout
   - Document exceptions
   - Regular review

2. **Clarity**
   - Self-documenting names
   - Avoid abbreviations
   - Clear purpose
   - Proper scope indication

3. **Length Guidelines**
   - Descriptive but concise
   - Context appropriate
   - Meaningful distinctions
   - Searchable names

4. **Conventions**
   - Follow PEP 8
   - Use type hints
   - Document special cases
   - Maintain consistency

## Maintenance
1. Regular naming reviews
2. Update documentation
3. Refactor as needed
4. Maintain style guide
5. Version control tracking 